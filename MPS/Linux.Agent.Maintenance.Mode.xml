<?xml version="1.0" encoding="utf-8"?><ManagementPack xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="2.0">
  <Manifest>
    <Identity>
      <ID>Linux.Agent.Maintenance.Mode</ID>
      <Version>1.0.1.42</Version>
    </Identity>
    <Name>Linux Agent Maintenance Mode</Name>
    <References>
      <Reference Alias="SC">
        <ID>Microsoft.SystemCenter.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Unix">
        <ID>Microsoft.Unix.Library</ID>
        <Version>10.19.1147.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Windows">
        <ID>Microsoft.Windows.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="System">
        <ID>System.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
    </References>
  </Manifest>
  <TypeDefinitions>
    <EntityTypes>
      <ClassTypes>
        <ClassType ID="Linux.Agent.Maintenance.Mode.AgentMaintenanceMode.Class" Accessibility="Internal" Abstract="false" Base="Unix!Microsoft.Unix.LocalApplication" Hosted="true" Singleton="false" Extension="false" />
      </ClassTypes>
    </EntityTypes>
    <ModuleTypes>
      <WriteActionModuleType ID="Linux.Agent.Maintenance.Mode.CreateEventFromLogFileEntry.WriteAction" Accessibility="Internal" Batching="false">
        <Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="EventOriginId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="PublisherId" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="PublisherName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="Channel" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="LoggingComputer" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="EventNumber" type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="EventCategory" type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="EventLevel" type="xsd:int" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="0" name="UserName" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="Description" type="xsd:string" /></Configuration>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <ConditionDetection ID="Mapper" TypeID="System!System.Event.GenericDataMapper"><EventOriginId>$Config/EventOriginId$</EventOriginId><PublisherId>$Config/PublisherId$</PublisherId><PublisherName>$Config/PublisherName$</PublisherName><Channel>$Config/Channel$</Channel><LoggingComputer>$Config/LoggingComputer$</LoggingComputer><EventNumber>$Config/EventNumber$</EventNumber><EventCategory>$Config/EventCategory$</EventCategory><EventLevel>$Config/EventLevel$</EventLevel><UserName>$Config/UserName$</UserName><Description>$Config/Description$</Description><Params><Param>$Config/Description$</Param></Params></ConditionDetection>
              <WriteAction ID="CollectEvent" TypeID="SC!Microsoft.SystemCenter.CollectEvent" />
            </MemberModules>
            <Composition>
              <Node ID="CollectEvent">
                <Node ID="Mapper" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
      <WriteActionModuleType ID="Linux.Agent.Maintenance.Mode.StopMMforInstancesofClass.WriteAction" Accessibility="Public" Batching="false">
        <Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="SCOMManagementServer" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="ClassName" type="xsd:string" /></Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="SCOMManagementServer" Selector="$Config/SCOMManagementServer$" ParameterType="string" />
          <OverrideableParameter ID="ClassName" Selector="$Config/ClassName$" ParameterType="string" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="Script" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction"><ScriptName>Stop-MMForAllInstancesOfClass.ps1</ScriptName><ScriptBody>[CmdletBinding()]
Param(

  [Parameter(Mandatory=$false)]
  [string]  
  $SCOMManagementServer,

  [Parameter(Mandatory=$false)]
  [string]$ClassName
  )



&lt;#
Test values 

$SCOMManagementServer = "."
$ClassName = "Linux.Agent.Maintenance.Mode.AgentMaintenanceMode.Class" # valid class name
#$ClassName = "Broken.class" #invalid class 

#&gt;


$ScriptName = "Stop-MMForAllInstancesOfClass.ps1"
$EventNumber = 5001

#Setting Trace log varriables to empty
$Script:CurrentAction = ""
$Script:Trace = ""

# Define 'Appendlog' function to allow appending to trace log 
function appendlog ([string]$Message)
{
	
    $Script:CurrentAction = $Message
	$Script:Trace += ((Get-Date).ToString() + "`t" + $Message + " `r`n")
    
    While(($Script:Trace.length) -gt 31000)
    {
       [System.Collections.ArrayList]$TraceList = $Script:Trace.Split("`n")
       $TraceList.Removeat(0)
       $TraceList[0] = "Message has been truncated to fit into Windows Event Log message"
       $Script:Trace = $TraceList -join "`n"
    }
}


$api = New-Object -comObject 'MOM.ScriptAPI'
AppendLog ("Starting script")
Write-Verbose $Script:CurrentAction
$api.LogScriptEvent($ScriptName,$EventNumber,4, $CurrentAction)

AppendLog ("Loading Operations Manager Module and connecting to Management Server: " + $SCOMManagementServer ) 
Write-Verbose $Script:CurrentAction 
Add-PSSnapin Microsoft.EnterpriseManagement.OperationsManager.Client
try{
    New-SCOMManagementGroupConnection -ComputerName $SCOMManagementServer
}
Catch{
    AppendLog ("Could not connect to Management Server " + $SCOMManagementServer  + " exiting script")
    $api.LogScriptEvent($ScriptName,$EventNumber,1, $CurrentAction)
    Write-Error $Script:CurrentAction
    Exit
}

AppendLog ("Getting Class $ClassName")
Write-Verbose $Script:CurrentAction
$Class = Get-SCOMClass -Name $ClassName
if($Class){
    AppendLog ("Class found '$($Class.Displayname)'")
    Write-Verbose $Script:Trace

    AppendLog ("Getting instances in maintenance mode")
    Write-Verbose $Script:Trace
    $Instances = @(Get-SCOMClassInstance -Class $Class | ? {$_.InMaintenanceMode})
    if($Instances){
        AppendLog ("$($Instances.Count) instances found in maintenance mode")
        Write-Verbose $Script:Trace

        foreach($Instance in $Instances){
            AppendLog ("Stopping maintenance mode for $($Instance.DisplayName) on $($Instance.Path)")
            Write-Verbose $Script:Trace
            $Instance.StopMaintenanceMode([System.DateTime]::Now.ToUniversalTime(),[Microsoft.EnterpriseManagement.Common.TraversalDepth]::Recursive)
        }   
    }else{
        AppendLog ("No instances found in maintenance mode")
        Write-Verbose $Script:Trace
    }
}else{
    AppendLog ("Class not found")
    Write-Verbose $Script:Trace
}

AppendLog ("Script completed")
Write-Verbose $Script:Trace
$api.LogScriptEvent($ScriptName,$EventNumber,4, $Script:Trace)



</ScriptBody><Parameters><Parameter><Name>SCOMManagementServer</Name><Value>$Config/SCOMManagementServer$</Value></Parameter><Parameter><Name>ClassName</Name><Value>$Config/ClassName$</Value></Parameter></Parameters><TimeoutSeconds>300</TimeoutSeconds></WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="Script" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Windows!Microsoft.Windows.SerializedObjectData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
      <WriteActionModuleType ID="Linux.Agent.Maintenance.Mode.TriggerMM.WriteAction" Accessibility="Public" Batching="false">
        <Configuration><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="SCOMManagementServer" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="id" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="MMEvent" type="xsd:string" /><xsd:element xmlns:xsd="http://www.w3.org/2001/XMLSchema" minOccurs="1" name="Separator" type="xsd:string" /></Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="SCOMManagementServer" Selector="$Config/SCOMManagementServer$" ParameterType="string" />
          <OverrideableParameter ID="Separator" Selector="$Config/Separator$" ParameterType="string" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="Script" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction"><ScriptName>Set-LinuxAgentMM.ps1</ScriptName><ScriptBody>[CmdletBinding()]
Param(

  [Parameter(Mandatory=$false)]
  [string]  
  $SCOMManagementServer,

  [Parameter(Mandatory=$false)]
  [string]$id,

  [Parameter(Mandatory=$false)]
  [string]$MMEvent,

  [Parameter(Mandatory=$false)]
  [string]$Separator
  )



&lt;#
Test values 

$id = "00000000-0000-0000-0000-000000000000"
$SCOMManagementServer = "."
$MMEvent = "19/10/2022 14:30,START,60,Testing MM,PlannedApplicationMaintenance" #Start
$MMEvent = "19/10/2022 14:30,STOP" #Stop
$Separator = ","
#&gt;
$Action = $MMEvent.split($Separator)[1]


&lt;# Valid MM Reasons
“ApplicationInstallation",
"ApplicationUnresponsive",
"LossOfNetworkConnectivity",
"PlannedApplicationMaintenance",
"PlannedHardwareInstallation",
"PlannedOperatingSystemReconfiguration",
"PlannedOther",
"SecurityIssue",
"UnplannedApplicationMaintenance",
"UnplannedHardwareMaintenance",
"UnplannedOther”
#&gt;


$EventNumber = 5002
$ScriptName = "Set-LinuxAgentMM.ps1"

#Setting Trace log varriables to empty
$Script:CurrentAction = ""
$Script:Trace = ""

# Define 'Appendlog' function to allow appending to trace log 
function appendlog ([string]$Message)
{
	
    $Script:CurrentAction = $Message
	$Script:Trace += ((Get-Date).ToString() + "`t" + $Message + " `r`n")
    
    While(($Script:Trace.length) -gt 31000)
    {
       [System.Collections.ArrayList]$TraceList = $Script:Trace.Split("`n")
       $TraceList.Removeat(0)
       $TraceList[0] = "Message has been truncated to fit into Windows Event Log message"
       $Script:Trace = $TraceList -join "`n"
    }
}


$api = New-Object -comObject 'MOM.ScriptAPI'
AppendLog ("Starting script")
Write-Verbose $Script:CurrentAction
$api.LogScriptEvent($ScriptName,$EventNumber,4, $CurrentAction)

AppendLog ("Loading Operations Manager Module and connecting to Management Server: " + $SCOMManagementServer ) 
Write-Verbose $Script:CurrentAction 
Add-PSSnapin Microsoft.EnterpriseManagement.OperationsManager.Client
try{
    New-SCOMManagementGroupConnection -ComputerName $SCOMManagementServer
}
Catch{
    AppendLog ("Could not connect to Management Server " + $SCOMManagementServer  + " exiting script")
    $api.LogScriptEvent($ScriptName,$EventNumber,1, $CurrentAction)
    Write-Error $Script:CurrentAction
    Exit
}





AppendLog ("Getting MM class instance: $id") 
Write-Verbose $Script:CurrentAction 
$UnixComputerClass = Get-SCOMClass -Name 'Microsoft.Unix.Computer'
$MMAgent = Get-SCOMClassInstance -Id $id
$Computer = $MMAgent.GetParentMonitoringObjects() | ? {$_.LeastDerivedNonAbstractManagementPackClassId -eq $UnixComputerClass.Id}



Switch ($Action){

    "START" {

        $MMDuration = $MMEvent.split($Separator)[2]
        $MMComment = $MMEvent.split($Separator)[3]
        $MMReason = $MMEvent.split($Separator)[4]
        $StartDate = $(Get-Date).ToUniversalTime();
        $MMEndDate = $StartDate.AddMinutes($MMDuration)

        if($Computer.InMaintenanceMode){
            AppendLog ("Computer already in Maintenance Mode") 
            Write-Verbose $Script:CurrentAction 
            $CurrentMMEndTime = $Computer.GetMaintenanceWindow().ScheduledEndTime
            $DateDiffScheduledEnd = New-TimeSpan $MMEndDate $CurrentMMEndTime
            if ($DateDiffScheduledEnd.TotalMinutes -lt 0){
                AppendLog ("Extending Maintenance Mode") 
                Write-Verbose $Script:CurrentAction 
                $MMComment = $Computer.GetMaintenanceWindow().Comments + "`r`nExtended: " + $MMComment
                $Computer.UpdateMaintenanceMode($MMEndDate, $Computer.GetMaintenanceWindow().Reason, $MMComment)
                if($MMAgent.InMaintenanceMode){
                    $MMAgent.StopMaintenanceMode([DateTime]::Now.ToUniversalTime(),[Microsoft.EnterpriseManagement.Common.TraversalDepth]::OneLevel);
                }
            }else{
                AppendLog ("Existing Maintenance Mode does not need to be extended") 
                Write-Verbose $Script:CurrentAction 
            }
                               
        }else{
            AppendLog ("Starting Maintenance Mode") 
            Write-Verbose $Script:CurrentAction 
            Start-SCOMMaintenanceMode -Instance $Computer -EndTime ($MMEndDate.ToUniversalTime()) -Comment $MMComment -Reason $MMReason
            $MMAgent.StopMaintenanceMode([DateTime]::Now.ToUniversalTime(),[Microsoft.EnterpriseManagement.Common.TraversalDepth]::OneLevel);
        }    
    }
    "STOP" {
        AppendLog ("Stopping Maintenance Mode") 
        Write-Verbose $Script:CurrentAction 
        $Computer.StopMaintenanceMode([System.DateTime]::Now.ToUniversalTime(),[Microsoft.EnterpriseManagement.Common.TraversalDepth]::Recursive);
    }

}


AppendLog ("Script completed")
Write-Verbose $Script:Trace
$api.LogScriptEvent($ScriptName,$EventNumber,4, $Script:Trace)

</ScriptBody><Parameters><Parameter><Name>SCOMManagementServer</Name><Value>$Config/SCOMManagementServer$</Value></Parameter><Parameter><Name>id</Name><Value>$Config/id$</Value></Parameter><Parameter><Name>MMEvent</Name><Value>$Config/MMEvent$</Value></Parameter><Parameter><Name>Separator</Name><Value>$Config/Separator$</Value></Parameter></Parameters><TimeoutSeconds>300</TimeoutSeconds></WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="Script" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Windows!Microsoft.Windows.SerializedObjectData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
    </ModuleTypes>
  </TypeDefinitions>
  <Monitoring>
    <Discoveries>
      <Discovery ID="Linux.Agent.Maintenance.Mode.AgentMaintenanceMode.Class.Discovery" Enabled="true" Target="Unix!Microsoft.Unix.Computer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="Linux.Agent.Maintenance.Mode.AgentMaintenanceMode.Class" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Unix!Microsoft.Unix.ScheduledClassSnapshotDataMapper"><Scheduler><SimpleReccuringSchedule><Interval Unit="Seconds">14400</Interval><SyncTime /></SimpleReccuringSchedule><ExcludeDates /></Scheduler><ClassId>$MPElement[Name="Linux.Agent.Maintenance.Mode.AgentMaintenanceMode.Class"]$</ClassId><InstanceSettings><Settings><Setting><Name>$MPElement[Name="Unix!Microsoft.Unix.Computer"]/PrincipalName$</Name><Value>$Target/Property[Type="Unix!Microsoft.Unix.Computer"]/PrincipalName$</Value></Setting><Setting><Name>$MPElement[Name="System!System.Entity"]/DisplayName$</Name><Value>Agent Maintenance Mode</Value></Setting></Settings></InstanceSettings></DataSource>
      </Discovery>
    </Discoveries>
    <Rules>
      <Rule ID="Linux.Agent.Maintenance.Mode.CollectStopMMAgentForAllInstancesScriptEvents.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.ManagementServer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventCollector"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>Operations Manager</LogName><AllowProxying>false</AllowProxying><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">5001</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">PublisherName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">Health Service Script</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">Stop-MMForAllInstancesOfClass.ps1</Value></ValueExpression></SimpleExpression></Expression></And></Expression></DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectEvent" />
        </WriteActions>
      </Rule>
      <Rule ID="Linux.Agent.Maintenance.Mode.CollectLinuxStartStopScriptEvents.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.ManagementServer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventCollector"><ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName><LogName>Operations Manager</LogName><AllowProxying>false</AllowProxying><Expression><And><Expression><SimpleExpression><ValueExpression><XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="UnsignedInteger">5002</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">PublisherName</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">Health Service Script</Value></ValueExpression></SimpleExpression></Expression><Expression><SimpleExpression><ValueExpression><XPathQuery Type="String">Params/Param[1]</XPathQuery></ValueExpression><Operator>Equal</Operator><ValueExpression><Value Type="String">Set-LinuxAgentMM.ps1</Value></ValueExpression></SimpleExpression></Expression></And></Expression></DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectEvent" />
        </WriteActions>
      </Rule>
      <Rule ID="Linux.Agent.Maintenance.Mode.MMLogEntryTriggersMM.Rule" Enabled="true" Target="Linux.Agent.Maintenance.Mode.AgentMaintenanceMode.Class" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="EventDS" TypeID="Unix!Microsoft.Unix.SCXLog.VarPriv.DataSource"><Host>$Target/Host/Property[Type="Unix!Microsoft.Unix.Computer"]/PrincipalName$</Host><LogFile>/var/log/scom-agentmm.log</LogFile><UserName>$RunAs[Name="Unix!Microsoft.Unix.ActionAccount"]/UserName$</UserName><Password>$RunAs[Name="Unix!Microsoft.Unix.ActionAccount"]/Password$</Password><RegExpFilter>START|STOP</RegExpFilter><IndividualAlerts>true</IndividualAlerts></DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="TriggerMMPoSh" TypeID="Linux.Agent.Maintenance.Mode.TriggerMM.WriteAction"><SCOMManagementServer>.</SCOMManagementServer><id>$Target/Id$</id><MMEvent>$Data/EventDescription$</MMEvent><Separator>,</Separator></WriteAction>
          <WriteAction ID="CreateEvent" TypeID="Linux.Agent.Maintenance.Mode.CreateEventFromLogFileEntry.WriteAction"><EventOriginId>$Target/Id$</EventOriginId><PublisherId>$Target/Id$</PublisherId><PublisherName>Linux Agent Maintenance Mode</PublisherName><Channel>/var/log/scom-agentmm.log</Channel><LoggingComputer>$Target/Host/Property[Type="Unix!Microsoft.Unix.Computer"]/PrincipalName$</LoggingComputer><EventNumber>5003</EventNumber><EventCategory>0</EventCategory><EventLevel>0</EventLevel><UserName /><Description>$Data/EventDescription$</Description></WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Linux.Agent.Maintenance.Mode.StopMMforAgentMMClass.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Operations</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="System!System.Scheduler"><Scheduler><SimpleReccuringSchedule><Interval Unit="Seconds">300</Interval><SyncTime></SyncTime></SimpleReccuringSchedule><ExcludeDates></ExcludeDates></Scheduler></DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WA" TypeID="Linux.Agent.Maintenance.Mode.StopMMforInstancesofClass.WriteAction"><SCOMManagementServer>.</SCOMManagementServer><ClassName>Linux.Agent.Maintenance.Mode.AgentMaintenanceMode.Class</ClassName></WriteAction>
        </WriteActions>
      </Rule>
    </Rules>
  </Monitoring>
  <Presentation>
    <Views>
      <View ID="Linux.Agent.Maintenance.Mode.MMLogEvents.View" Accessibility="Public" Enabled="true" Target="Linux.Agent.Maintenance.Mode.AgentMaintenanceMode.Class" TypeID="SC!Microsoft.SystemCenter.EventViewType" Visible="true">
        <Category>Operations</Category><Criteria><RuleList><Rule>$MPElement[Name="Linux.Agent.Maintenance.Mode.MMLogEntryTriggersMM.Rule"]$</Rule></RuleList></Criteria><Presentation><ColumnInfo Index="0" SortIndex="0" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Level</Name><Id>LevelId</Id></ColumnInfo><ColumnInfo Index="1" SortIndex="1" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Descending"><Name>Date and Time</Name><Id>TimeGenerated</Id></ColumnInfo><ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Source</Name><Id>PublisherName</Id></ColumnInfo><ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Name</Name><Id>MonitoringObjectDisplayName</Id></ColumnInfo><ColumnInfo Index="4" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>User</Name><Id>User</Id></ColumnInfo><ColumnInfo Index="5" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Event Number</Name><Id>Number</Id></ColumnInfo><ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Log Name</Name><Id>Channel</Id></ColumnInfo></Presentation></View>
      <View ID="Linux.Agent.Maintenance.Mode.AgentMaintenanceMode.Class.View" Accessibility="Public" Enabled="true" Target="Linux.Agent.Maintenance.Mode.AgentMaintenanceMode.Class" TypeID="SC!Microsoft.SystemCenter.StateViewType" Visible="true">
        <Category>Operations</Category><Criteria><InMaintenanceMode>false</InMaintenanceMode></Criteria><Presentation><ColumnInfo Index="0" SortIndex="0" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Descending"><Name>State</Name><Id>Linux.Agent.Maintenance.Mode.AgentMaintenanceMode.Class</Id></ColumnInfo><ColumnInfo Index="1" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Maintenance Mode</Name><Id>InMaintenanceMode</Id></ColumnInfo><ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Name</Name><Id>Name</Id></ColumnInfo><ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Path</Name><Id>Path</Id></ColumnInfo><ColumnInfo Index="4" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Display Name</Name><Id>System.Entity/DisplayName</Id></ColumnInfo></Presentation><Target /></View>
      <View ID="Linux.Agent.Maintenance.Mode.ManagementServerMMScriptsEvents.View" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.ManagementServer" TypeID="SC!Microsoft.SystemCenter.EventViewType" Visible="true">
        <Category>Operations</Category><Criteria><RuleList><Rule>$MPElement[Name="Linux.Agent.Maintenance.Mode.CollectLinuxStartStopScriptEvents.Rule"]$</Rule><Rule>$MPElement[Name="Linux.Agent.Maintenance.Mode.CollectStopMMAgentForAllInstancesScriptEvents.Rule"]$</Rule></RuleList></Criteria><Presentation><ColumnInfo Index="0" SortIndex="0" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Level</Name><Id>LevelId</Id></ColumnInfo><ColumnInfo Index="1" SortIndex="1" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Descending"><Name>Date and Time</Name><Id>TimeGenerated</Id></ColumnInfo><ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Source</Name><Id>PublisherName</Id></ColumnInfo><ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Name</Name><Id>MonitoringObjectDisplayName</Id></ColumnInfo><ColumnInfo Index="4" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>User</Name><Id>User</Id></ColumnInfo><ColumnInfo Index="5" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Event Number</Name><Id>Number</Id></ColumnInfo><ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending"><Name>Log Name</Name><Id>Channel</Id></ColumnInfo></Presentation></View>
    </Views>
    <Folders>
      <Folder ID="Linux.Agent.Maintenance.Mode.Root.Folder" Accessibility="Public" ParentFolder="SC!Microsoft.SystemCenter.Monitoring.ViewFolder.Root" />
    </Folders>
    <FolderItems>
      <FolderItem ElementID="Linux.Agent.Maintenance.Mode.AgentMaintenanceMode.Class.View" ID="Linux.Agent.Maintenance.Mode.AgentMaintenanceMode.Class.View.FolderItem" Folder="Linux.Agent.Maintenance.Mode.Root.Folder" />
      <FolderItem ElementID="Linux.Agent.Maintenance.Mode.MMLogEvents.View" ID="Linux.Agent.Maintenance.Mode.MMLogEvents.View.FolderItem" Folder="Linux.Agent.Maintenance.Mode.Root.Folder" />
      <FolderItem ElementID="Linux.Agent.Maintenance.Mode.ManagementServerMMScriptsEvents.View" ID="Linux.Agent.Maintenance.Mode.ManagementServerMMScriptsEvents.View.FolderItem" Folder="Linux.Agent.Maintenance.Mode.Root.Folder" />
    </FolderItems>
  </Presentation>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="Linux.Agent.Maintenance.Mode.AgentMaintenanceMode.Class.Discovery">
          <Name>Linux Agent Maintenance Mode Class Discovery</Name>
          <Description>Discovers Instance of Linux Agent Maintenance Mode Class on instances of Microsoft.Unix.Computer.</Description>
        </DisplayString>
        <DisplayString ElementID="Linux.Agent.Maintenance.Mode.CollectStopMMAgentForAllInstancesScriptEvents.Rule">
          <Name>Collect Linux Agent Maintenance Mode script Events - Stop-MMForAllInstancesOfClass.ps1</Name>
          <Description>Collects script events for Stop-MMForAllInstancesOfClass.ps1</Description>
        </DisplayString>
        <DisplayString ElementID="Linux.Agent.Maintenance.Mode.CollectLinuxStartStopScriptEvents.Rule">
          <Name>Collect Linux Agent Maintenance Mode script Events - Set-LinuxAgentMM.ps1</Name>
          <Description>Collects script events for Set-LinuxAgentMM.ps1</Description>
        </DisplayString>
        <DisplayString ElementID="Linux.Agent.Maintenance.Mode.MMLogEntryTriggersMM.Rule">
          <Name>Linux Agent Maintenance Mode - Linux Log Entry triggers Maintenance Mode Rule</Name>
          <Description>Linux Log Entry triggers Maintenance Mode Rule</Description>
        </DisplayString>
        <DisplayString ElementID="Linux.Agent.Maintenance.Mode.StopMMforAgentMMClass.Rule">
          <Name>Linux Agent Maintenance Mode - Stop Maintenance Mode for all instances of MM Linux Agent Class Rule</Name>
          <Description>Stop Maintenance Mode for all instances of MM Linux Agent Class. Ensures MM agent class is out of MM to pick up stop MM log entries.</Description>
        </DisplayString>
        <DisplayString ElementID="Linux.Agent.Maintenance.Mode">
          <Name>Linux Agent Maintenance Mode</Name>
          <Description>MP used to initiate maintenance mode from a Linux agent</Description>
        </DisplayString>
        <DisplayString ElementID="Linux.Agent.Maintenance.Mode.Root.Folder">
          <Name>Linux Agent Maintenance Mode</Name>
        </DisplayString>
        <DisplayString ElementID="Linux.Agent.Maintenance.Mode.AgentMaintenanceMode.Class.View">
          <Name>Agents</Name>
        </DisplayString>
        <DisplayString ElementID="Linux.Agent.Maintenance.Mode.MMLogEvents.View">
          <Name>MM Log Events</Name>
          <Description>Events generated by MM log file entries on Linux agents</Description>
        </DisplayString>
        <DisplayString ElementID="Linux.Agent.Maintenance.Mode.ManagementServerMMScriptsEvents.View">
          <Name>MM PowerShell Script Events</Name>
          <Description>Event generated by PowerShell scripts on Management Servers</Description>
        </DisplayString>
        <DisplayString ElementID="Linux.Agent.Maintenance.Mode.AgentMaintenanceMode.Class">
          <Name>Linux Agent Maintenance Mode Class</Name>
        </DisplayString>
        <DisplayString ElementID="Linux.Agent.Maintenance.Mode.CreateEventFromLogFileEntry.WriteAction">
          <Name>Create Event from Log entry</Name>
          <Description>Creates event with the log file entry description</Description>
        </DisplayString>
        <DisplayString ElementID="Linux.Agent.Maintenance.Mode.StopMMforInstancesofClass.WriteAction">
          <Name>Stop Maintenance Mode for All Instance of a Class</Name>
          <Description>PowerShell script that stops Maintenance Mode for all instance of a class</Description>
        </DisplayString>
        <DisplayString ElementID="Linux.Agent.Maintenance.Mode.StopMMforInstancesofClass.WriteAction" SubElementID="SCOMManagementServer">
          <Name>Management Server</Name>
          <Description>Management server script will connect to.</Description>
        </DisplayString>
        <DisplayString ElementID="Linux.Agent.Maintenance.Mode.StopMMforInstancesofClass.WriteAction" SubElementID="ClassName">
          <Name>Class Name</Name>
          <Description>Class Name (not display name).</Description>
        </DisplayString>
        <DisplayString ElementID="Linux.Agent.Maintenance.Mode.TriggerMM.WriteAction" SubElementID="SCOMManagementServer">
          <Name>Management Server</Name>
          <Description>Management server script will connect to.</Description>
        </DisplayString>
        <DisplayString ElementID="Linux.Agent.Maintenance.Mode.TriggerMM.WriteAction">
          <Name>Start or Stop Maintenance Mode on Linux Computer</Name>
          <Description>Start or stop Maintenance Mode on Linux computer. Takes log entry as input.</Description>
        </DisplayString>
        <DisplayString ElementID="Linux.Agent.Maintenance.Mode.TriggerMM.WriteAction" SubElementID="Separator">
          <Name>Separator</Name>
          <Description>Field separator used to split log entry.</Description>
        </DisplayString>
      </DisplayStrings>
      <KnowledgeArticles>
        <KnowledgeArticle ElementID="Linux.Agent.Maintenance.Mode.AgentMaintenanceMode.Class.Discovery" Visible="true">
          <MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>
                Discovers Instance of<maml:ui>Linux Agent Maintenance Mode Class</maml:ui>(Linux.Agent.Maintenance.Mode.AgentMaintenanceMode.Class) on instances of<maml:ui>UNIX/Linux Compute</maml:ui>r (Microsoft.Unix.Computer).
              </maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Configuration</maml:title><maml:table><maml:tableHeader><maml:row><maml:headerEntry><maml:para>Parameter</maml:para></maml:headerEntry><maml:headerEntry><maml:para>Default Value</maml:para></maml:headerEntry><maml:headerEntry><maml:para>Description</maml:para></maml:headerEntry></maml:row></maml:tableHeader><maml:row><maml:entry><maml:para>Interval</maml:para></maml:entry><maml:entry><maml:para>14400 (seconds)</maml:para></maml:entry><maml:entry><maml:para>Discovery interval.</maml:para></maml:entry></maml:row></maml:table><maml:para> </maml:para><maml:para> </maml:para></maml:section></MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="Linux.Agent.Maintenance.Mode.MMLogEntryTriggersMM.Rule" Visible="true">
          <MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>Rule that collects Maintenance Mode log entries in log file. Uses data from log file to start, stop, or extend maintenance mode window for the Linux computer object.</maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Configuration</maml:title><maml:table><maml:tableHeader><maml:row><maml:headerEntry><maml:para>Parameter</maml:para></maml:headerEntry><maml:headerEntry><maml:para>Default Value</maml:para></maml:headerEntry><maml:headerEntry><maml:para>Description</maml:para></maml:headerEntry></maml:row></maml:tableHeader><maml:row><maml:entry><maml:para>Log File</maml:para></maml:entry><maml:entry><maml:para>/var/log/scom-agentmm.log</maml:para></maml:entry><maml:entry><maml:para>Log file to monitor for Maintenance Mode entries.</maml:para></maml:entry></maml:row><maml:row><maml:entry><maml:para>Separator</maml:para></maml:entry><maml:entry><maml:para>,</maml:para></maml:entry><maml:entry><maml:para>Field separator used to split log entry.</maml:para></maml:entry></maml:row></maml:table></maml:section></MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="Linux.Agent.Maintenance.Mode.StopMMforAgentMMClass.Rule" Visible="true">
          <MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Summary</maml:title><maml:para>
                Rule targeting the<maml:ui>All Management Server Resource Pool</maml:ui> that gets all instance of <maml:ui>Linux Agent Maintenance Mode</maml:ui>class that are in Maintenance Mode and stops Maintenance Mode for the class. If the class is in Maintenance Mode it will not detect new update or stop Maintenance Mode log entries. 
              </maml:para></maml:section><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Configuration</maml:title><maml:table><maml:tableHeader><maml:row><maml:headerEntry><maml:para>Parameter</maml:para></maml:headerEntry><maml:headerEntry><maml:para>Default Value</maml:para></maml:headerEntry><maml:headerEntry><maml:para>Description</maml:para></maml:headerEntry></maml:row></maml:tableHeader><maml:row><maml:entry><maml:para>Interval</maml:para></maml:entry><maml:entry><maml:para>300 (seconds)</maml:para></maml:entry><maml:entry><maml:para>Interval between rule executions.</maml:para></maml:entry></maml:row><maml:row><maml:entry><maml:para>Management Server</maml:para></maml:entry><maml:entry><maml:para>.</maml:para></maml:entry><maml:entry><maml:para>Management server the script connects to. Script is expected to run on a management server.</maml:para><maml:para> </maml:para><maml:para>Should not need to be changed unless you are troubleshooting and issue. </maml:para></maml:entry></maml:row><maml:row><maml:entry><maml:para>Class</maml:para></maml:entry><maml:entry><maml:para>Linux.Agent.Maintenance.Mode.AgentMaintenanceMode.Class</maml:para></maml:entry><maml:entry><maml:para>Name of class to stop maintenance mode on.</maml:para><maml:para> </maml:para><maml:para>Should not need to be changed unless you are troubleshooting and issue. </maml:para></maml:entry></maml:row></maml:table><maml:para> </maml:para><maml:para> </maml:para></maml:section></MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="Linux.Agent.Maintenance.Mode" Visible="true">
          <MamlContent><maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10"><maml:title>Linux Agent Maintenance Mode</maml:title><maml:para>
                Documentation and the latest version can be found on GitHub -<maml:navigationLink><maml:linkText>https://github.com/KeithRochester/Linux-Agent-Maintenance-Mode.</maml:linkText><maml:uri href="https://github.com/KeithRochester/Linux-Agent-Maintenance-Mode" /></maml:navigationLink>. 
              </maml:para><maml:para>
                If you have any questions or suggestions, please send me a message <maml:navigationLink><maml:linkText>keith.rochester@unit92.com</maml:linkText><maml:uri href="mailto:keith.rochester@unit92.com?subject=Linux%20Agent%20Maintenance%20Mode" /></maml:navigationLink></maml:para></maml:section></MamlContent>
        </KnowledgeArticle>
      </KnowledgeArticles>
    </LanguagePack>
  </LanguagePacks>
</ManagementPack>